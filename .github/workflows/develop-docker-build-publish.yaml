name: docker-build-publish

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  push:
    branches: [ "develop", "qa", "master" ]
    # Publish semver tags as releases.
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ "develop", "qa", "master" ]
  workflow_dispatch:
    inputs:
      # Allow manual triggering of a workflow run.
      # This is useful for testing and debugging.
      manual_trigger:
        description: 'Trigger a workflow seeder run manually'
        required: false
        default: 'false'

env:
  SERVER: docker.io
  USER: twistorgar
  IMAGE: devops-app
  VERSION: 1.0.1
  SERVICE: devops-app
  HOST: 0.0.0.0
  DB_CONNECTION: mysql
  # Specific values
  develop_PORT: 30306 
  develop_NODE_ENV: development
  develop_DRIVE_DISK: local
  develop_MYSQL_HOST: 149.50.132.241
  develop_MYSQL_PORT: 30306
  develop_MYSQL_DB_NAME: devops_develop
  # Specific values
  qa_PORT: 30306 
  qa_NODE_ENV: qa
  qa_DRIVE_DISK: local
  qa_MYSQL_HOST: 149.50.132.241
  qa_MYSQL_PORT: 30306
  qa_MYSQL_DB_NAME: devops_qa
  # Specific values
  master_PORT: 30306 
  master_NODE_ENV: master
  master_DRIVE_DISK: local
  master_MYSQL_HOST: 149.50.132.241
  master_MYSQL_PORT: 30306
  master_MYSQL_DB_NAME: devops_master

jobs:
  build-push-image:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    steps:
      - uses: actions/checkout@v3

      - name: "Docker hub repository login 💠"
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: "Getting name of branch 🌿"
        id: BRANCH
        run: echo ::set-output name=BRANCH::${GITHUB_REF#refs/*/} # ${{ steps.branch.outputs.BRANCH }}

      - name: "Compose Customized Docker Image and push it 🐳"
        shell: bash
        run: |
          # Building image with binaries 
          cd newsie && docker build . -t ${{ env.SERVER }}/${{ env.USER }}/${{ env.IMAGE }}:${{ env.VERSION }} --no-cache 
          # Pushing image to repository
          docker push ${{ env.SERVER }}/${{ env.USER }}/${{ env.IMAGE }}:${{ env.VERSION }}
      
      - name: "Notify status of failure job"
        if: ${{ failure() }}
        run: |
          curl -X POST -H "Content-Type: application/json" \
          -d '{"content": "Something in build or push of image 📸 ${{ env.SERVER }}/${{ env.USER }}/${{ env.IMAGE }}:${{ env.VERSION }} was wrong! 🐳\nStatus: `${{ job.status }}` 💥👻 \nAutor: @${{ github.actor }} \nLink: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"}' \
          ${{ env.TEAMS_WEBHOOK_URL }}
      
  schema-migration:
    runs-on: ubuntu-latest
    needs: [build-push-image]
    steps:
    - name: "Applying migrations with new image 🦅"
      if: github.ref == 'refs/heads/develop'
      shell: bash
      run: |
        # Running new image
        docker run --rm \
        -e "HOST=${{ env.HOST }}" \
        -e "PORT=${{ env.develop_PORT }}" \
        -e "NODE_ENV=${{ env.develop_NODE_ENV }}" \
        -e "APP_KEY=${{ secrets.develop_APP_KEY }}" \
        -e "DRIVE_DISK=${{ env.develop_DRIVE_DISK }}" \
        -e "DB_CONNECTION=${{ env.DB_CONNECTION }}" \
        -e "MYSQL_HOST=${{ env.develop_MYSQL_HOST }}" \
        -e "MYSQL_PORT=${{ env.develop_MYSQL_PORT }}" \
        -e "MYSQL_USER=${{ secrets.develop_MYSQL_USER }}" \
        -e "MYSQL_PASSWORD=${{ secrets.develop_MYSQL_PASSWORD }}" \
        -e "MYSQL_DB_NAME=${{ env.develop_MYSQL_DB_NAME }}" \
        ${{ env.SERVER }}/${{ env.USER }}/${{ env.IMAGE }}:${{ env.VERSION }} \
        node ace migration:run
    - name: "Applying migrations with new image 🦅"
      if: github.ref == 'refs/heads/qa'
      shell: bash
      run: |
        # Running new image
        docker run --rm \
        -e "HOST=${{ env.HOST }}" \
        -e "PORT=${{ env.qa_PORT }}" \
        -e "NODE_ENV=${{ env.qa_NODE_ENV }}" \
        -e "APP_KEY=${{ secrets.qa_APP_KEY }}" \
        -e "DRIVE_DISK=${{ env.qa_DRIVE_DISK }}" \
        -e "DB_CONNECTION=${{ env.DB_CONNECTION }}" \
        -e "MYSQL_HOST=${{ env.qa_MYSQL_HOST }}" \
        -e "MYSQL_PORT=${{ env.qa_MYSQL_PORT }}" \
        -e "MYSQL_USER=${{ secrets.qa_MYSQL_USER }}" \
        -e "MYSQL_PASSWORD=${{ secrets.qa_MYSQL_PASSWORD }}" \
        -e "MYSQL_DB_NAME=${{ env.qa_MYSQL_DB_NAME }}" \
        ${{ env.SERVER }}/${{ env.USER }}/${{ env.IMAGE }}:${{ env.VERSION }} \
        node ace migration:run
    - name: "Applying migrations with new image 🦅"
      if: github.ref == 'refs/heads/master'
      shell: bash
      run: |
        # Running new image
        docker run --rm \
        -e "HOST=${{ env.HOST }}" \
        -e "PORT=${{ env.master_PORT }}" \
        -e "NODE_ENV=${{ env.master_NODE_ENV }}" \
        -e "APP_KEY=${{ secrets.master_APP_KEY }}" \
        -e "DRIVE_DISK=${{ env.master_DRIVE_DISK }}" \
        -e "DB_CONNECTION=${{ env.DB_CONNECTION }}" \
        -e "MYSQL_HOST=${{ env.master_MYSQL_HOST }}" \
        -e "MYSQL_PORT=${{ env.master_MYSQL_PORT }}" \
        -e "MYSQL_USER=${{ secrets.master_MYSQL_USER }}" \
        -e "MYSQL_PASSWORD=${{ secrets.master_MYSQL_PASSWORD }}" \
        -e "MYSQL_DB_NAME=${{ env.master_MYSQL_DB_NAME }}" \
        ${{ env.SERVER }}/${{ env.USER }}/${{ env.IMAGE }}:${{ env.VERSION }} \
        node ace migration:run
    
    - name: "Notify status of failure job"
      if: ${{ failure() }}
      run: |
        curl -X POST -H "Content-Type: application/json" \
        -d '{"content": "Something in migration of image 📸 ${{ env.SERVER }}/${{ env.USER }}/${{ env.IMAGE }}:${{ env.VERSION }} was wrong! 🦅\nStatus: `${{ job.status }}` 💥👻 \nAutor: @${{ github.actor }} \nLink: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"}' \
        ${{ env.TEAMS_WEBHOOK_URL }}
  
  data-migration:
    runs-on: ubuntu-latest
    needs: [schema-migration]
    container: nelsonyaccuzzi/flyway
    steps:
      - uses: actions/checkout@v3
      
      - name: Applying flyway to develop
        if: github.ref == 'refs/heads/develop'
        run: |
          flyway info -locations=filesystem:newsie/database/flyway -url="jdbc:mysql://${{ env.develop_MYSQL_HOST }}:${{ env.develop_MYSQL_PORT }}/${{ env.develop_MYSQL_DB_NAME }}" -user=${{ secrets.MYSQL_ROOT_USR }} -password=${{ secrets.MYSQL_ROOT_PSW }}
          flyway migrate -locations=filesystem:newsie/database/flyway -url="jdbc:mysql://${{ env.develop_MYSQL_HOST }}:${{ env.develop_MYSQL_PORT }}/${{ env.develop_MYSQL_DB_NAME }}" -user=${{ secrets.MYSQL_ROOT_USR }} -password=${{ secrets.MYSQL_ROOT_PSW }} -schemas="${{ env.develop_MYSQL_DB_NAME }}" -table="flyway_version" -baselineOnMigrate="true"
          flyway info -locations=filesystem:newsie/database/flyway -url="jdbc:mysql://${{ env.develop_MYSQL_HOST }}:${{ env.develop_MYSQL_PORT }}/${{ env.develop_MYSQL_DB_NAME }}" -user=${{ secrets.MYSQL_ROOT_USR }} -password=${{ secrets.MYSQL_ROOT_PSW }}

      - name: Applying flyway to qa
        if: github.ref == 'refs/heads/qa'
        run: |
          flyway info -locations=filesystem:newsie/database/flyway -url="jdbc:mysql://${{ env.qa_MYSQL_HOST }}:${{ env.qa_MYSQL_PORT }}/${{ env.qa_MYSQL_DB_NAME }}" -user=${{ secrets.MYSQL_ROOT_USR }} -password=${{ secrets.MYSQL_ROOT_PSW }}
          flyway migrate -locations=filesystem:newsie/database/flyway -url="jdbc:mysql://${{ env.qa_MYSQL_HOST }}:${{ env.qa_MYSQL_PORT }}/${{ env.qa_MYSQL_DB_NAME }}" -user=${{ secrets.MYSQL_ROOT_USR }} -password=${{ secrets.MYSQL_ROOT_PSW }} -schemas="${{ env.qa_MYSQL_DB_NAME }}" -table="flyway_version" -baselineOnMigrate="true"
          flyway info -locations=filesystem:newsie/database/flyway -url="jdbc:mysql://${{ env.qa_MYSQL_HOST }}:${{ env.qa_MYSQL_PORT }}/${{ env.qa_MYSQL_DB_NAME }}" -user=${{ secrets.MYSQL_ROOT_USR }} -password=${{ secrets.MYSQL_ROOT_PSW }}

      - name: Applying flyway to master
        if: github.ref == 'refs/heads/master'
        run: |
          flyway info -locations=filesystem:newsie/database/flyway -url="jdbc:mysql://${{ env.develop_MYSQL_HOST }}:${{ env.develop_MYSQL_PORT }}/${{ env.develop_MYSQL_DB_NAME }}" -user=${{ secrets.MYSQL_ROOT_USR }} -password=${{ secrets.MYSQL_ROOT_PSW }}
          flyway migrate -locations=filesystem:newsie/database/flyway -url="jdbc:mysql://${{ env.develop_MYSQL_HOST }}:${{ env.develop_MYSQL_PORT }}/${{ env.develop_MYSQL_DB_NAME }}" -user=${{ secrets.MYSQL_ROOT_USR }} -password=${{ secrets.MYSQL_ROOT_PSW }} -schemas="${{ env.master_MYSQL_DB_NAME }}" -table="flyway_version" -baselineOnMigrate="true"
          flyway info -locations=filesystem:newsie/database/flyway -url="jdbc:mysql://${{ env.develop_MYSQL_HOST }}:${{ env.develop_MYSQL_PORT }}/${{ env.develop_MYSQL_DB_NAME }}" -user=${{ secrets.MYSQL_ROOT_USR }} -password=${{ secrets.MYSQL_ROOT_PSW }}

  deploy-app:
    runs-on: ubuntu-latest
    needs: [data-migration]
    steps:
    # Get the name of each branch where running
    - name: "Getting name of branch 🌿"
      id: vars
      run: echo ::set-output name=branch::${GITHUB_REF#refs/*/} # ${{ steps.vars.outputs.branch }}

    # Conencting to srv and updating Helm chart
    - name: "Updating files charts of Helm 🔱"
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.SRV_IP_TWISTORGAR }}
        username: ${{ secrets.SRV_USER_TWISTORGAR }}
        password: ${{ secrets.SRV_PASSWORD_TWISTORGAR }}
        port: ${{ secrets.SRV_PORT_TWISTORGAR }}
        script: |
          if [ ! -d "${{ github.event.repository.name }}" ]; then
            git clone -b ${{ steps.vars.outputs.branch }} https://${{ secrets.GIT_USER }}:${{ secrets.GIT_PASSWORD }}@github.com/${{ github.repository }}.git
          else
            cd /home/twist/${{ github.event.repository.name }} && git fetch && git checkout ${{ steps.vars.outputs.branch }} && git pull
          fi

    # Conencting to srv and running helm commands to initialize or upgrade charts
    - name: "Updating Helm App 🚀"
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.SRV_IP_TWISTORGAR }}
        username: ${{ secrets.SRV_USER_TWISTORGAR }}
        password: ${{ secrets.SRV_PASSWORD_TWISTORGAR }}
        port: ${{ secrets.SRV_PORT_TWISTORGAR }}
        script: |
          cd /home/twist/${{ github.event.repository.name }}/manifests/helm && \
          sudo helm upgrade --install ${{ env.SERVICE }} . -n devops-${{ steps.vars.outputs.branch }} -f values-${{ steps.vars.outputs.branch }}.yaml --create-namespace

          cd /home/twist/${{ github.event.repository.name }}/manifests/vars  && \
          sudo kubectl apply -f secret-${{ steps.vars.outputs.branch }}.yaml -n devops-${{ steps.vars.outputs.branch }} && \
          sudo kubectl apply -f configmap-${{ steps.vars.outputs.branch }}.yaml -n devops-${{ steps.vars.outputs.branch }}
          
    - name: "Notify status of failure job"
      if: ${{ failure() }}
      run: |
        curl -X POST -H "Content-Type: application/json" \
        -d '{"content": "Something in deploy in server of image 📸 ${{ env.SERVER }}/${{ env.USER }}/${{ env.IMAGE }}:${{ env.VERSION }} was wrong! 🚀\nStatus: `${{ job.status }}` 💥👻 \nAutor: @${{ github.actor }} \nLink: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"}' \
        ${{ env.TEAMS_WEBHOOK_URL }}

  notification:
    runs-on: ubuntu-latest
    needs: [deploy-app]
    steps:
      - name: Notify Teams
        env:
          TEAMS_WEBHOOK_URL: ${{ secrets.TEAMS_WEBHOOK_URL }}
          TARGET_BRANCH: develop
        run: |
          curl -X POST -H "Content-Type: application/json" \
          -d '{"content": "Build and deploy in server of image 📸 ${{ env.SERVER }}/${{ env.USER }}/${{ env.IMAGE }}:${{ env.VERSION }} was succesfully! 🐳🚀\nStatus: `${{ job.status }}` 🍻✅ \nAutor: @${{ github.actor }} \nLink: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"}' \
          ${{ secrets.TEAMS_WEBHOOK_URL }}