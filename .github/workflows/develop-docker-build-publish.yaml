name: Docker-build-publish

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  push:
    branches: [ "develop" ]
    # Publish semver tags as releases.
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ "develop" ]
env:
  SERVER: docker.io
  USER: twistorgar
  IMAGE: devops-app
  VERSION: 1.0.1
  SERVICE: devops-app

jobs:
  build-push-image:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    steps:
      - uses: actions/checkout@v3

      - name: "Docker hub repository login 💠"
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: "Getting name of branch 🌿"
        id: BRANCH
        run: echo ::set-output name=BRANCH::${GITHUB_REF#refs/*/} # ${{ steps.branch.outputs.BRANCH }}

      - name: "Set name of app 🐱‍🚀"
        id: NAME_APP
        run: |
          # Determine name of app based in pom.xml
          echo ::set-output name=NAME_APP::$(grep -oPm1 "(?<=<artifactId>)[^<]+" <<< $(cat pom.xml))

      - name: "Set version of app 🆚"
        id: VERSION_APP
        run: |
          # Determine version of app based in pom.xml
          echo ::set-output name=VERSION_APP::${{ env.VERSION }}

      - name: "Compose Customized Docker Image and push it 🐳"
        shell: bash
        run: |
          # Building image with binaries
          cd newsie && docker build . -t ${{ env.SERVER }}/${{ env.USER }}/${{ env.IMAGE }}:${{ steps.VERSION_APP.outputs.VERSION_APP }}
          # Pushing image to repository
          docker push ${{ env.SERVER }}/${{ env.USER }}/${{ env.IMAGE }}:${{ steps.VERSION_APP.outputs.VERSION_APP }}

  helm:
    runs-on: ubuntu-latest
    needs: [build-push-image]
    steps:
    # Get the name of each branch where running
    - name: "Getting name of branch 🌿"
      id: vars
      run: echo ::set-output name=branch::${GITHUB_REF#refs/*/} # ${{ steps.vars.outputs.branch }}

    # Conencting to srv and running helm commands to initialize or upgrade charts
    - name: "Managing cycle of life of Helm Charts 🔱"
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.SRV_IP_TWISTORGAR }}
        username: ${{ secrets.SRV_USER_TWISTORGAR }}
        password: ${{ secrets.SRV_PASSWORD_TWISTORGAR }}
        port: ${{ secrets.SRV_PORT_TWISTORGAR }}
        script: |
          if [ ! -d "${{ github.event.repository.name }}" ]; then
            git clone -b ${{ steps.vars.outputs.branch }} https://${{ secrets.GIT_USER }}:${{ secrets.GIT_PASSWORD }}@github.com/${{ github.repository }}.git
          else
            cd /home/twist/${{ github.event.repository.name }} && git pull
          fi
          cd /home/twist/${{ github.event.repository.name }}/manifests/secrets && sudo kubectl apply -f secret-${{ steps.vars.outputs.branch }}.yaml -n devops
          cd /home/twist/${{ github.event.repository.name }}/manifests/helm && \
          sudo helm upgrade --install ${{ env.SERVICE }} . -n devops -f values-${{ steps.vars.outputs.branch }}.yaml --create-namespace
